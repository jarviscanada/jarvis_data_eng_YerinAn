package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityOrderDao){
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount
   * -validate user input (all fields must be non empty)
   * -create a trader
   * -create an account
   * -create, setup, and return a new traderAccountView
   *
   * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id(auto-generated by db.
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields of id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader){
    checkNullValue(trader);
    traderDao.save(trader);
    Account account = new Account();
    account.setTraderId(trader.getId());
    account.setAmount(0d);
    accountDao.save(account);
    return new TraderAccountView(trader, account);
  }

  private void checkNullValue(Trader trader){
    if(trader == null || trader.getFirstName() == null || trader.getLastName() == null
    || trader.getCountry() == null || trader.getEmail() == null || trader.getDob() == null)
      throw new IllegalArgumentException("ERROR: TRADER FIELD HAS NULL VALUE");
    else if(trader.getId() != null)
      throw new IllegalArgumentException("ERROR: TRADER ID HAS VALUE");
  }

  private Account validateId(Integer traderId){
    if(traderId == null || traderId <= 0)
      throw new IllegalArgumentException("ERROR: INVALID TRADER ID");
    if(!traderDao.existsById(traderId))
      throw new IllegalArgumentException("ERROR: TRADER DOES NOT EXIST");
    Optional<Account> account = accountDao.findByTraderId(traderId);
    if(account.isPresent())
      return account.get();
    throw new IllegalArgumentException("ERROR: CANNOT FIND ACCOUNT");
  }

  /**
   * A Trader can be deleted if it has no open position and 0 cash balance
   * -validate traderId
   * -get trader account by traderId and check account balance
   * -get positions by accountId and check positions
   * -delete all securityOrders, account, trader(in this order)
   * @param traderId must not be null
   * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    Account account = validateId(traderId);
    List<Position> positionList = positionDao.findById(account.getId());
    if(positionList.size() > 0)
      throw new IllegalArgumentException("ERROR: OPEN POSITION CANNOT BE DELETED");
    checkFundValue(true, 0d, account);
    try{
      securityOrderDao.deleteByAccountId(account.getId());
      accountDao.deleteById(account.getId());
      traderDao.deleteById(traderId);
    }catch (Exception e){
      throw new RuntimeException("ERROR: FAILED TO DELETE", e);
    }
  }

  private void checkFundValue(Boolean isDeleted, Double fund, Account account){
    if(isDeleted){
      if(account.getAmount() != 0)
        throw new IllegalArgumentException("ERROR: BALANCE MUST BE 0");
    }else {
      if(fund <= 0)
        throw new IllegalArgumentException("ERROR: INVALID FUND VALUE");
      if(account != null){
        if(account.getAmount() != null && (account.getAmount()-fund < 0))
          throw new IllegalArgumentException("ERROR: INSUFFICIENT FUND");
      }
    }
  }

  /**
   * Deposit a fund to an account by traderId
   * -validate user input
   * -account = accountDao, findByTraderId
   * -accountDao.updated Account
   * @param traderId must not be null
   * @param fund must be grater than 0
   * @return updatedAccount
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to 0
   */
  public Account deposit(Integer traderId, Double fund){
    Account account = validateId(traderId);
    checkFundValue(false, fund, null);
    account.setAmount(account.getAmount() + fund);
    accountDao.updateOne(account);
    return account;
  }

  /**
   * Withdraw a fund to an account by traderId
   * -validate user input
   * -account = accountDao.findByTraderId
   * -accountDao.updateAmountById
   * @param traderId trader ID
   * @param fund amount can't be 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, fund is less or equal to 0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund){
    Account account = validateId(traderId);
    checkFundValue(false, fund, account);
    account.setAmount(account.getAmount() - fund);
    accountDao.updateOne(account);
    return account;
  }
}
